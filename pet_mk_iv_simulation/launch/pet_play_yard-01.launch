<?xml version="1.0" encoding="UTF-8"?>
<!--
  \licens       Software License Agreement (MIT)
  \file         <workspace>/src/rover_gazebo/launch/gazebo_world.launch
  \authors      stefan.kull@gmail.com (Github ID 'SeniorKullken')
  \repository   https://github.com/kullken/Pet-Mk-IV
  \repository   https://github.com/kullken/pet_mcu_base
  \copyright    
  \description  Gazebo launch file that spawn(inserts) Pet Mark IV into a simple world(play yard) from realrobotlab.
  ____________________________________________________________________________
  \usage
    $ roslaunch rover_gazebo gazebo_world.launch
  ____________________________________________________________________________
  \todo "[ WARN] [1625328237.452135370] [/robot_state_publisher]: The 'state_publisher' executable is deprecated. Please use 'robot_state_publisher' instead
  
  \reference  http://gazebosim.org/tutorials?tut=ros_roslaunch
-->
<launch>
  
  <!-- 
    These are the arguments you can pass to this launch file...
    For example: 
      paused:=true 
      spawn_x:=-0.27
  --> 
  <arg name="spawn_x"   default="-0.100"/>  <!-- Default URDF robot coordinate -->
  <arg name="spawn_y"   default="0.350"/>   <!-- Default URDF robot coordinate -->
  <arg name="spawn_z"   default="0.0"/>     <!-- Default URDF robot coordinate -->

  <arg name="world"     default="pet_play_yard-01.world"/> 
  <arg name="paused"    default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui"       default="true"/>
  <arg name="headless"  default="false"/>
  <arg name="debug"     default="false"/>
  <arg name="verbose"   default="true"/>  
  
  <!--
    Parse/compile the world/context Description *.world.xacro => *.world
  -->
  <node name="xacro" pkg="xacro" type="xacro" args="$(find pet_mk_iv_simulation)/worlds/$(arg world).xacro -o $(find pet_mk_iv_simulation)/worlds/$(arg world)" />
  
  <!--
    Load the world/context Description
  -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"  value="$(find pet_mk_iv_simulation)/worlds/$(arg world)"/>
    <arg name="paused"      value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui"         value="$(arg gui)"/>
    <arg name="headless"    value="$(arg headless)"/>
    <arg name="debug"       value="$(arg debug)"/>
    <arg name="verbose"     value="$(arg verbose)"/>
  </include>

  <!--
    Parse/compile the Robot Description *urdf.xacro => *.urdf
    URDF xml robot description loaded into the ROS Parameter Server, converting the xacro into a proper urdf file
  -->
  <param name="robot_description" 
         command="$(find xacro)/xacro.py '$(find pet_mk_iv_description)/urdf/pet_mk_iv.urdf.xacro'"/> 

  <!-- load the controllers -->
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!-- push robot_description to factory and spawn/insert/launch robot in gazebo -->
  <node  name="mybot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
         args="-urdf -param robot_description -x $(arg spawn_x) -y $(arg spawn_y) -z $(arg spawn_z) -model rover" /> 

  <!-- Convert joint states to TF transforms for rviz, etc -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="False"/>
  </node> 
  
  <!-- Combine joint values -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/> 

  <!--
    Lanch node that Converts Gazebo Camera/Image topics => Bolean line sensor topics
    (Reason is that Gazebo/Virtual vs. Real/Physical robot has different type of topics)
  -->
  <node name="line_sensor_left_converter" pkg="pet_mk_iv_simulation" type="line_sensor_gazebo_converter.py"> 
    <remap from="camera"      to="/line_sensors/left/image_raw" />
    <remap from="line_sensor" to="/line_sensors/left" />
  </node>
  <node name="line_sensor_mid_converter" pkg="pet_mk_iv_simulation" type="line_sensor_gazebo_converter.py"> 
    <remap from="camera"      to="/line_sensors/mid/image_raw" />
    <remap from="line_sensor" to="/line_sensors/mid" />
  </node>
  <node name="line_sensor_right_converter" pkg="pet_mk_iv_simulation" type="line_sensor_gazebo_converter.py"> 
    <remap from="camera"      to="/line_sensors/right/image_raw" />
    <remap from="line_sensor" to="/line_sensors/right" />
  </node>

</launch>